Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.
Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4

SOlUTION :-
class Solution {
    public int searchInsert(int[] nums, int target) {
        //declaring position and initializing with value 0 
        
     int position = 0;
        //creating a loop for traversing in the array
        for(int i=0; i<nums.length; i++)
        {
            //if the element in array is large or equal to target then we apend the value in 
            //the position variable and return it, if the nums[i] element is greater than the target also then we need to return because it is a sorted array  
            
            if(nums[i] >= target)
            {
                position = i;
                return position;
            }
            else // else nums[i] is smaller than the target we apend the position value like this
            {
                position = i+1;
            }
           
        
        }
        return position;

    }
    
}
